"""
Django settings for PGASC project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path

from django.contrib.messages import constants as messages

# Add message tags for bootstrap compliant messages
MESSAGE_TAGS = {
    messages.DEBUG: "alert-secondary",
    messages.INFO: "alert-info",
    messages.SUCCESS: "alert-success",
    messages.WARNING: "alert-warning",
    messages.ERROR: "alert-danger",
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# hint: BASE_DIR is "/app/src/pgasc/web"
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = (
    "django-insecure-90tjw0$6ys8!2kj+&u)0l@0$o)2$mv)zagpsciqlog@axh=*o+"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
CSRF_TRUSTED_ORIGINS = [
    "https://pg.felix-ol.de:15901",
    "https://kon.pg.felix-ol.de:15901",
    "http://localhost:9090",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "pgasc.web.home",
    "pgasc.web.usermanagement",
    "pgasc.web.agentsystemmanagement",
    "pgasc.web.competitiondefinitionmanagement",
    "pgasc.web.experimentdefinitionmanagement",
    "pgasc.web.experimentexecutionmanagement",
    "crispy_forms",
    "active_link",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "pgasc.web.djangoroot.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "./templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "pgasc.web.djangoroot.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ["DJANGO_DB_NAME"],
        "USER": os.environ["DJANGO_DB_USER"],
        "PASSWORD": os.environ["DJANGO_DB_PASSWORD"],
        "HOST": os.environ["DJANGO_DB_HOST"],
        "PORT": os.environ["DJANGO_DB_PORT"],
    },
    "midas": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.environ["MIDAS_DB_NAME"],
        "USER": os.environ["MIDAS_DB_USER"],
        "PASSWORD": os.environ["MIDAS_DB_PASSWORD"],
        "HOST": os.environ["MIDAS_DB_HOST"],
        "PORT": os.environ["MIDAS_DB_PORT"],
    },
    "palaestrai": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.environ["PALAESTRAI_DB_NAME"],
        "USER": os.environ["PALAESTRAI_DB_USER"],
        "PASSWORD": os.environ["PALAESTRAI_DB_PASSWORD"],
        "HOST": os.environ["PALAESTRAI_DB_HOST"],
        "PORT": os.environ["PALAESTRAI_DB_PORT"],
    },
}

# Custom User Model
# This is using the custom user model for djangoroot Oriented on this tutorial
# https://testdriven.io/blog/django-custom-user-model/

AUTH_USER_MODEL = "usermanagement.CustomUser"

LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

CRISPY_TEMPLATE_PACK = "bootstrap4"

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
importPath = "django.contrib.auth.password_validation"
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": f"{importPath}.UserAttributeSimilarityValidator"},
    {"NAME": f"{importPath}.MinimumLengthValidator"},
    {"NAME": f"{importPath}.CommonPasswordValidator"},
    {"NAME": f"{importPath}.NumericPasswordValidator"},
]

WEBPACK_LOADER = {
    "DEFAULT": {
        "BUNDLE_DIR_NAME": "dist/",
        "STATS_FILE": os.path.join("frontend", "webpack-stats.json"),
    }
}

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Etc/GMT-1"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = "var/static_root/"
STATICFILES_DIRS = ["pgasc/web/static"]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Logging
log_dir = os.path.join("..", "logs")
if not os.path.exists(log_dir):
    os.makedirs(log_dir)
LOGGING = {
    "version": 1,  # the dictConfig format version
    "disable_existing_loggers": False,  # retain the default loggers
    "handlers": {
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(
                log_dir, os.getenv("LOGFILE_NAME", "django.log")
            ),
            "level": os.getenv("LOGLEVEL_FILE", "WARNING"),
            "formatter": "verbose",
            "maxBytes": 20000000,  # set log file size to 20MB
            "backupCount": 0,  # rotate log file once
        },
        "console": {
            "class": "logging.StreamHandler",
            "level": os.getenv("LOGLEVEL_CONSOLE", "WARNING"),
            "formatter": "verbose",
        },
    },
    "loggers": {"": {"level": "DEBUG", "handlers": ["file", "console"]}},
    "formatters": {
        "verbose": {
            "format": "{name} {levelname} {asctime} {message}",
            "style": "{",
        },
        "simple": {"format": "{levelname} {message}", "style": "{"},
    },
}

"""
    own constants and configuration values for competition server
"""

# filepaths
DIR_TEMP = "/app/temp"
DIR_USER_DATA = "/app/user_data"
DIR_AGENTS = os.path.join(DIR_USER_DATA, "uploaded_agents")
DIR_EXPERIMENTS = os.path.join(DIR_USER_DATA, "uploaded_experiments")
DIR_EXPERIMENT_LOGS = os.path.join(DIR_USER_DATA, "experiment_logs")
DIR_EXPERIMENT_EXPORT = os.path.join(DIR_USER_DATA, "experiment_results")

# scheduler
SCHEDULER_DEV_MODE = os.getenv("SCHEDULER_DEV_MODE", "false") == "true"
SCHEDULER_EXPERIMENT_CAPACITY_PER_PU = int(os.getenv("CAPACITY_PER_PU", 5))
SCHEDULER_USABLE_GPUS = os.getenv("USABLE_GPUS", None)
SCHEDULER_SLEEP_SECONDS_LOOP = 10
SCHEDULER_SLEEP_SECONDS_INITIALIZATION = 10

# website
WEBSITE_DEV_MODE = os.getenv("WEBSITE_DEV_MODE", "false") == "true"

# Experiment
EXPERIMENT_DEV_MODE = os.getenv("EXPERIMENT_DEV_MODE", "false") == "true"
