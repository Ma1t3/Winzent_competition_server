{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 28,
      "panels": [],
      "title": "Analysis (simtime)",
      "type": "row"
    },
    {
      "datasource": "PGASCExperimentResult",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "VM/PU",
            "axisPlacement": "left",
            "axisSoftMax": 1.1,
            "axisSoftMin": 0.9,
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 3,
            "pointSize": 1,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "line"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 0.9
              },
              {
                "color": "orange",
                "value": 0.95
              },
              {
                "color": "orange",
                "value": 1.05
              },
              {
                "color": "#E02F44",
                "value": 1.1
              }
            ]
          }
        },
        "overrides": [
          {
            "__systemRef": "hideSeriesFrom",
            "matcher": {
              "id": "byNames",
              "options": {
                "mode": "exclude",
                "names": [
                  "Mean"
                ],
                "prefix": "All except:",
                "readOnly": true
              }
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 1
      },
      "id": 10,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P7DEC88D2E8D5A1C6"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n  time - '$midas_startdate'::TIMESTAMP + '$start_date'::TIMESTAMP+ '0 second'::interval AS \"time\",\n  pp_meta.name AS metric,\n  vm_pu\nFROM pp_bus, pp_bus_meta as pp_meta\nWHERE pp_meta.pp_index = pp_bus.pp_index and $__timeFilter(\"time\") and pp_meta.experiment_id = $experiment_id and pp_bus.experiment_id = $experiment_id ORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "vm_pu"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_bus",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Busse",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "alias": "Mean",
            "mode": "reduceRow",
            "reduce": {
              "reducer": "mean"
            }
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P47E1BA2B3D02DB01"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 9
      },
      "id": 16,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "8.5.2",
      "targets": [
        {
          "datasource": "PalaestraiDB",
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\", \nCASE WHEN (CAST(((rewards::json)::json-> 'grid_health_reward' ->> 'value') AS float)) IS NOT NULL \nTHEN CAST(((rewards::json)::json-> 'grid_health_reward' ->> 'value') AS float) \nELSE CAST(((rewards::json)::json->> 'grid_health_reward') AS float)  END as \"reward\"\nFROM muscle_actions \nLEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id\nWHERE episodes.episode = $episode\nAND muscle_actions.agent_id = $agent_id\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Environment Reward for selected Episode",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P7DEC88D2E8D5A1C6"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 12,
        "y": 9
      },
      "id": 18,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P7DEC88D2E8D5A1C6"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT   time - '$midas_startdate'::TIMESTAMP + '$start_date'::TIMESTAMP+ '0 second'::interval AS \"time\",   CAST(pp_meta.pp_index AS VARCHAR) AS metric,   loading_percent \nFROM pp_line, pp_line_meta as pp_meta \nWHERE pp_meta.pp_index = pp_line.pp_index and $__timeFilter(\"time\") \nand pp_meta.experiment_id = $experiment_id and pp_line.experiment_id = $experiment_id \nORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Line - loading percentage",
      "transformations": [
        {
          "id": "reduce",
          "options": {
            "reducers": []
          }
        },
        {
          "id": "calculateField",
          "options": {
            "mode": "reduceRow",
            "reduce": {
              "include": [
                "0",
                "1",
                "10",
                "11",
                "12",
                "15",
                "14",
                "13",
                "16",
                "17",
                "18",
                "19",
                "2",
                "35",
                "34",
                "33",
                "32",
                "31",
                "30",
                "3",
                "29",
                "28",
                "27",
                "20",
                "21",
                "22",
                "23",
                "24",
                "25",
                "26",
                "36",
                "37",
                "38",
                "39",
                "4",
                "40",
                "41",
                "42",
                "6",
                "59",
                "58",
                "57",
                "56",
                "55",
                "54",
                "53",
                "52",
                "51",
                "50",
                "5",
                "49",
                "48",
                "47",
                "46",
                "45",
                "44",
                "43",
                "60",
                "61",
                "62",
                "63",
                "64",
                "65",
                "66",
                "67",
                "68",
                "69",
                "7",
                "70",
                "71",
                "72",
                "8",
                "9"
              ],
              "reducer": "mean"
            }
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P47E1BA2B3D02DB01"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "axisSoftMin": 0,
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 15
      },
      "id": 22,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "groupWidth": 0.7,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "auto",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        },
        "xField": "actions",
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 100
      },
      "pluginVersion": "9.0.1",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT id - (SELECT min(id) FROM muscle_actions WHERE muscle_actions.agent_id = $agent_id) as \"actions\", AVG(CASE WHEN (CAST(((rewards::json)::json-> 'grid_health_reward' ->> 'value') AS float)) IS NOT NULL \nTHEN CAST(((rewards::json)::json-> 'grid_health_reward' ->> 'value') AS float) \nELSE CAST(((rewards::json)::json->> 'grid_health_reward') AS float)  END) OVER(ORDER BY id ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) as \"moving average reward\"\nFROM muscle_actions\nWHERE muscle_actions.agent_id = $agent_id",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Reward - MovingAverage 100",
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P7DEC88D2E8D5A1C6"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 16
      },
      "id": 26,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P7DEC88D2E8D5A1C6"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT   time - '$midas_startdate'::TIMESTAMP + '$start_date'::TIMESTAMP+ '0 second'::interval AS \"time\",   CAST(pp_meta.pp_index AS VARCHAR) AS metric,   loading_percent \nFROM pp_trafo, pp_trafo_meta as pp_meta \nWHERE pp_meta.pp_index = pp_trafo.pp_index and $__timeFilter(\"time\") \nand pp_meta.experiment_id = $experiment_id and pp_trafo.experiment_id = $experiment_id \nORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Trafo - Loading Percent",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "mode": "reduceRow",
            "reduce": {
              "reducer": "max"
            }
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P47E1BA2B3D02DB01"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "axisSoftMin": 0,
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 21
      },
      "id": 20,
      "options": {
        "barRadius": 0,
        "barWidth": 0.27,
        "groupWidth": 0.7,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "auto",
        "showValue": "never",
        "stacking": "normal",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        },
        "xField": "episode",
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 0
      },
      "pluginVersion": "9.0.1",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT episode, AVG(CASE WHEN (CAST(((rewards::json)::json-> 'grid_health_reward' ->> 'value') AS float)) IS NOT NULL \nTHEN CAST(((rewards::json)::json-> 'grid_health_reward' ->> 'value') AS float) \nELSE CAST(((rewards::json)::json->> 'grid_health_reward') AS float)  END) as \"average reward\"\nFROM muscle_actions, episodes\nWHERE muscle_actions.agent_id = $agent_id\nAND episodes.muscle_action_id = muscle_actions.id\nGROUP BY episode\nORDER BY 1, 2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Average Episode Reward",
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P7DEC88D2E8D5A1C6"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "MW",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 22
      },
      "id": 6,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "8.4.4",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P7DEC88D2E8D5A1C6"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "pp_index",
          "rawQuery": true,
          "rawSql": "SELECT\n  time - '$midas_startdate'::TIMESTAMP + '$start_date'::TIMESTAMP+ '0 second'::interval AS \"time\",\n  pp_meta.name AS metric,\n  p_mw\nFROM pp_load, pp_load_meta as pp_meta\nWHERE pp_meta.pp_index = pp_load.pp_index and pp_meta.experiment_id = $experiment_id and pp_load.experiment_id = $experiment_id ORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_load",
          "timeColumn": "time",
          "timeColumnType": "timestamp",
          "where": []
        }
      ],
      "title": "Loads",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "mode": "reduceRow",
            "reduce": {
              "reducer": "mean"
            }
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P7DEC88D2E8D5A1C6"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "MW",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 11,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 29
      },
      "id": 12,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P7DEC88D2E8D5A1C6"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n  time - '$midas_startdate'::TIMESTAMP + '$start_date'::TIMESTAMP+ '0 second'::interval AS \"time\",\n  pp_meta.name AS metric,\n  p_mw\nFROM pp_ext_grid, pp_ext_grid_meta as pp_meta\nWHERE pp_meta.pp_index = pp_ext_grid.pp_index and pp_meta.experiment_id = $experiment_id and pp_ext_grid.experiment_id = $experiment_id ORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Ext Grid",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "mode": "reduceRow",
            "reduce": {
              "reducer": "mean"
            }
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P7DEC88D2E8D5A1C6"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "MW",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 30
      },
      "id": 4,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "8.4.4",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P7DEC88D2E8D5A1C6"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "pp_index",
          "rawQuery": true,
          "rawSql": "SELECT\n  time - '$midas_startdate'::TIMESTAMP + '$start_date'::TIMESTAMP+ '0 second'::interval AS \"time\",\n  pp_meta.name AS metric,\n  p_mw\nFROM pp_static_generator as pp_sgen, pp_static_generator_meta as pp_meta\nWHERE pp_meta.pp_index = pp_sgen.pp_index and pp_meta.experiment_id = $experiment_id and pp_sgen.experiment_id = $experiment_id ORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "time",
          "timeColumnType": "timestamp",
          "where": []
        }
      ],
      "title": "Generators",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "mode": "reduceRow",
            "reduce": {
              "reducer": "mean"
            }
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 38
      },
      "id": 155,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P7DEC88D2E8D5A1C6"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "custom": {
                "align": "auto",
                "displayMode": "auto",
                "inspect": false
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 7,
            "w": 24,
            "x": 0,
            "y": 39
          },
          "id": 8,
          "options": {
            "footer": {
              "fields": "",
              "reducer": [
                "sum"
              ],
              "show": false
            },
            "showHeader": true
          },
          "pluginVersion": "9.0.7",
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P7DEC88D2E8D5A1C6"
              },
              "format": "table",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT\n  \"time\" AS \"Zeitstempel\",\n  (case \n  when \"type\" = 'trafo' \n    then \n      (SELECT name FROM pp_trafo_meta pp_meta \n      WHERE pp_meta.experiment_id=con.experiment_id \n      and pp_meta.pp_index=con.pp_index)\n  when \"type\" = 'line' \n    then \n      (SELECT name FROM pp_line_meta pp_meta \n      WHERE pp_meta.experiment_id=con.experiment_id \n      and pp_meta.pp_index=con.pp_index) \n  when \"type\" = 'load' \n    then \n      (SELECT name FROM pp_load_meta pp_meta \n      WHERE pp_meta.experiment_id=con.experiment_id \n      and pp_meta.pp_index=con.pp_index)\n  when \"type\" = 'sgen' \n    then \n      (SELECT name FROM pp_static_generator_meta pp_meta \n      WHERE pp_meta.experiment_id=con.experiment_id \n      and pp_meta.pp_index=con.pp_index) \n  else '0' \n  end) as \"Netzelement\",\n  key as \"Constraint\"\nFROM \"constraint\" as con\nWHERE\n  $__timeFilter(\"time\") and con.experiment_id = $experiment_id\nORDER BY 1",
              "refId": "Constraints",
              "select": [
                [
                  {
                    "params": [
                      "key"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "\"constraint\"",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Constraint",
          "transformations": [],
          "type": "table"
        }
      ],
      "title": "Constraints",
      "type": "row"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 39
      },
      "id": 44,
      "panels": [],
      "title": "Actuator-Setpoints (simtime)",
      "type": "row"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P47E1BA2B3D02DB01"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 40
      },
      "id": 32,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%load%' AND agent_id = $agent_1 \nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "$agent_1_name: load-actuator-setpoints",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P47E1BA2B3D02DB01"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 40
      },
      "id": 34,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%load%' AND agent_id = $agent_2 \nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "$agent_2_name: load-actuator-setpoints",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P47E1BA2B3D02DB01"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 48
      },
      "id": 36,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%sgen%' AND agent_id = $agent_1 \nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "$agent_1_name: sgen-actuator-setpoints",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P47E1BA2B3D02DB01"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 48
      },
      "id": 38,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%sgen%' AND agent_id = $agent_2 \nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "$agent_2_name: sgen-actuator-setpoints",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P47E1BA2B3D02DB01"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 56
      },
      "id": 40,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%switch%' AND agent_id = $agent_1 \nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "$agent_1_name: switch-actuator-setpoints",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P47E1BA2B3D02DB01"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 56
      },
      "id": 42,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%switch%' AND agent_id = $agent_2 \nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "$agent_2_name: switch-actuator-setpoints",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P47E1BA2B3D02DB01"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 64
      },
      "id": 46,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%trafo%' AND agent_id = $agent_1 \nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "$agent_1_name: trafo-actuator-setpoints",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P47E1BA2B3D02DB01"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 64
      },
      "id": 48,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%trafo%' AND agent_id = $agent_2 \nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "p_mw"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "pp_static_generator",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "$agent_2_name: trafo-actuator-setpoints",
      "type": "timeseries"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 72
      },
      "id": 30,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 4
          },
          "id": 50,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT\n  walltime as \"time\",\n  AVG(CAST((rewards::json->'grid_health_reward' ->> 'value') AS float)) \n  OVER(ORDER BY walltime ROWS BETWEEN 96 PRECEDING AND CURRENT ROW) as \"reward\"\nFROM muscle_actions\nWHERE agent_id = $agent_id\norder by time asc ",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Reward - walltime - MovingAvrage 96",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 4
          },
          "id": 51,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT\n  walltime as \"time\",\n  CAST((rewards::json->'grid_health_reward' ->> 'value') AS float) \"reward\"\nFROM muscle_actions\nWHERE agent_id = $agent_id\norder by time asc ",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Reward - walltime - MovingAvrage 96",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 12
          },
          "id": 52,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT\nwalltime as \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE metric LIKE '%load%' and agent_id = $agent_1 \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "$agent_1_name: actuator setpoints",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 12
          },
          "id": 53,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT\nwalltime as \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE metric LIKE '%load%' and agent_id = $agent_2 \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "$agent_2_name: load-actuator setpoints (wt)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 20
          },
          "id": 54,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT\nwalltime as \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE metric LIKE '%sgen%' and agent_id = $agent_1 \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "$agent_1_name: sgen-actuator setpoints (wt)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 20
          },
          "id": 55,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT\nwalltime as \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE metric LIKE '%sgen%' and agent_id = $agent_2 \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "$agent_2_name: sgen-actuator setpoints (wt)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 28
          },
          "id": 56,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT\nwalltime as \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE metric LIKE '%switch%' and agent_id = $agent_1 \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "$agent_1_name: switch-actuator setpoints (wt)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 28
          },
          "id": 57,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT\nwalltime as \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE metric LIKE '%switch%' and agent_id = $agent_2 \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "$agent_2_name: switch-actuator setpoints (wt)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 36
          },
          "id": 58,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT\nwalltime as \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE metric LIKE '%trafo%' and agent_id = $agent_1 \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "$agent_1_name: trafo-actuator setpoints (wt)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 36
          },
          "id": 59,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT\nwalltime as \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions,\njson_each(muscle_actions.actuator_setpoints::json) as json_data(metric,value)\nWHERE metric LIKE '%trafo%' and agent_id = $agent_2 \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "$agent_2_name: trafo-actuator setpoints (wt)",
          "type": "timeseries"
        }
      ],
      "title": "Actuator-Setpoints + Reward (walltime)",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 73
      },
      "id": 137,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 42
          },
          "id": 138,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT walltime as \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE metric LIKE '%load%' and metric LIKE '%p_mw' AND (agent_id = $agent_1 or agent_id = $agent_2)\nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Load-Sensor-Reading: q_mw (walltime)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 50
          },
          "id": 141,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT walltime as \"time\",\njson_data.metric as metric,\nCAST(CASE WHEN value = 'true' THEN '1'\n          WHEN value = 'false' THEN '0'\n            \n    END AS int)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE metric LIKE '%load%' and metric LIKE '%in_service' AND (agent_id = $agent_1 or agent_id = $agent_2)\nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Load-Sensor-Reading: in_service (walltime)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 7,
            "w": 12,
            "x": 0,
            "y": 58
          },
          "id": 143,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT walltime as \"time\",\njson_data.metric as metric,\nvalue::float\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE metric LIKE '%sgen%' and metric LIKE '%p_mw_flex' AND (agent_id = $agent_1 or agent_id = $agent_2)\nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Sgen-Sensor-Reading: p_mw_flex (walltime)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 7,
            "w": 12,
            "x": 12,
            "y": 58
          },
          "id": 145,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT walltime as \"time\",\njson_data.metric as metric,\nvalue::float\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE metric LIKE '%sgen%' and metric LIKE '%scaling' AND (agent_id = $agent_1 or agent_id = $agent_2)\nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Sgen-Sensor-Reading: scaling (walltime)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 65
          },
          "id": 144,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT walltime as \"time\",\njson_data.metric as metric,\nCAST(CASE WHEN value = 'true' THEN '1'\n          WHEN value = 'false' THEN '0'\n            \n    END AS int)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE metric LIKE '%load%' and metric LIKE '%in_service' AND (agent_id = $agent_1 or agent_id = $agent_2)\nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Sgen-Sensor-Reading: in_service (walltime)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 65
          },
          "id": 148,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT walltime as \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE metric LIKE '%line%' and metric LIKE '%loading_percent' AND (agent_id = $agent_1 or agent_id = $agent_2)\nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Line-Sensor-Reading: loading_percent ($walltime)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 73
          },
          "id": 150,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT walltime as \"time\",\njson_data.metric as metric,\nvalue::float\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE metric LIKE '%trafo%' and metric LIKE '%tap_pos' AND (agent_id = $agent_1 or agent_id = $agent_2)\nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Trafo-Sensor-Reading: tap_pos (walltime)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 73
          },
          "id": 149,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT walltime as \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE metric LIKE '%trafo%' and metric LIKE '%loading_percent' AND (agent_id = $agent_1 or agent_id = $agent_2)\nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Trafo-Sensor-Reading: loading_percent (walltime)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 81
          },
          "id": 151,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT walltime as \"time\",\njson_data.metric as metric,\nCAST(CASE WHEN json_data.value::json->>'value' = 'true' THEN '1'\n          WHEN json_data.value::json->>'value' = 'false' THEN '0'\n            \n    END AS int)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE metric LIKE '%switch%' and (agent_id = $agent_1 or agent_id = $agent_2)\nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Switch-Sensor-Reading: closed (walltime)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 81
          },
          "id": 147,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT walltime as \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE metric LIKE '%bus%' and metric LIKE '%vm_pu' AND (agent_id = $agent_1 or agent_id = $agent_2)\nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Bus-Sensor-Reading: vm_pu (walltime)",
          "type": "timeseries"
        }
      ],
      "title": "Sensor-Readings Walltime (only important sensors)",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 74
      },
      "id": 133,
      "panels": [],
      "title": "$agent_1_name",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 75
      },
      "id": 127,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 98
          },
          "id": 91,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%bus%' and metric LIKE '%vm_pu' AND agent_id = $agent_1\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Bus-Sensor-Reading: vm_pu ($agent_1_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 98
          },
          "id": 87,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%bus%' and metric LIKE '%va_degree' AND agent_id = $agent_1\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Bus-Sensor-Reading: va_degree ($agent_1_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_1_name: Bus-Sensor-Readings",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 76
      },
      "id": 121,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 99
          },
          "id": 93,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%line%' and metric LIKE '%loading_percent' AND agent_id = $agent_1\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Line-Sensor-Reading: loading_percent ($agent_1_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 99
          },
          "id": 89,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njsonb_data.metric as metric,\nCAST(case when value = 'true' then '1'\nwhen value = 'false' then '0'\n            \n       end as int)\n\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as jsonb_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%line%' and metric LIKE '%in_service' AND agent_id = $agent_1\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::jsonb->>'env')::jsonb->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Line-Sensor-Reading: in_service ($agent_1_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_1_name: Line-Sensor-Readings",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 77
      },
      "id": 119,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 100
          },
          "id": 62,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%load%' and metric LIKE '%p_mw' AND agent_id = $agent_1\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Load-Sensor-Reading: p_mw ($agent_1_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 100
          },
          "id": 65,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nvalue::float\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%load%' and metric LIKE '%scaling' AND agent_id = $agent_1\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Load-Sensor-Reading: scaling ($agent_1_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 108
          },
          "id": 64,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%load%' and metric LIKE '%q_mvar' AND agent_id = $agent_1\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Load-Sensor-Reading: q_mvar ($agent_1_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 116
          },
          "id": 66,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(CASE WHEN value = 'true' THEN '1'\n          WHEN value = 'false' THEN '0'\n            \n    END AS int)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%load%' and metric LIKE '%in_service' AND agent_id = $agent_1 \nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Load-Sensor-Reading: in_service ($agent_1_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_1_name: Load-Sensor-Readings",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 78
      },
      "id": 125,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 126
          },
          "id": 67,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%sgen%' and metric LIKE '%p_mw' AND (agent_id = $agent_1)\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Sgen-Sensor-Reading: p_mw ($agent_1_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 126
          },
          "id": 152,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nvalue::float\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%sgen%' and metric LIKE '%p_mw_flex' AND (agent_id = $agent_1)\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Sgen-Sensor-Reading: p_mw_flex ($agent_1_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 7,
            "w": 12,
            "x": 0,
            "y": 134
          },
          "id": 153,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%sgen%' and metric LIKE '%q_mvar' AND (agent_id = $agent_1)\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Sgen-Sensor-Reading: q_mvar ($agent_1_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 7,
            "w": 12,
            "x": 12,
            "y": 134
          },
          "id": 142,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nvalue::float\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%sgen%' and metric LIKE '%scaling' AND (agent_id = $agent_1)\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Sgen-Sensor-Reading: scaling ($agent_1_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 141
          },
          "id": 146,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(CASE WHEN value = 'true' THEN '1'\n          WHEN value = 'false' THEN '0'\n            \n    END AS int)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%sgen%' and metric LIKE '%in_service' AND (agent_id = $agent_1)\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Sgen-Sensor-Reading: in_service ($agent_1_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_1_name: Sgen-Sensor-Readings",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 79
      },
      "id": 129,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 102
          },
          "id": 101,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nvalue::int\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%trafo%' and metric LIKE '%tap_pos' AND agent_id = $agent_1\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Trafo-Sensor-Reading: tap_pos ($agent_1_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 102
          },
          "id": 97,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%trafo%' and metric LIKE '%loading_percent' AND agent_id = $agent_1\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Trafo-Sensor-Reading: loading_percent ($agent_1_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 110
          },
          "id": 99,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(CASE WHEN value = 'true' THEN '1'\n          WHEN value = 'false' THEN '0'\n            \n    END AS int)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%trafo%' and metric LIKE '%in_service' AND agent_id = $agent_1\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Trafo-Sensor-Reading: in_service ($agent_1_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_1_name: Trafo-Sensor-Readings",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 80
      },
      "id": 123,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 167
          },
          "id": 61,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%ext_grid%' and metric LIKE '%p_mw' AND agent_id = $agent_1 \nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Ext-Grid-Sensor-Reading: p_mw ($agent_1_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 167
          },
          "id": 63,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%ext_grid%' and metric LIKE '%q_mvar' AND agent_id = $agent_1 \nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Ext-Grid-Sensor-Reading: q_mvar ($agent_1_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_1_name: Ext-Grid-Sensor-Readings",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 81
      },
      "id": 131,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 104
          },
          "id": 95,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(CASE WHEN json_data.value::json->>'value' = 'true' THEN '1'\n          WHEN json_data.value::json->>'value' = 'false' THEN '0'\n            \n    END AS int)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%switch%' AND agent_id = $agent_1\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Switch-Sensor-Reading: closed($agent_1_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_1_name: Switch-Sensor-Readings",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 82
      },
      "id": 135,
      "panels": [],
      "title": "$agent_2_name",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 83
      },
      "id": 113,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 186
          },
          "id": 90,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%bus%' and metric LIKE '%vm_pu' AND agent_id = $agent_2\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Bus-Sensor-Reading: vm_pu ($agent_2_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 186
          },
          "id": 88,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%bus%' and metric LIKE '%va_degree' AND agent_id = $agent_2\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Bus-Sensor-Reading: va_degree ($agent_2_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_2_name: Bus-Sensor-Readings",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 84
      },
      "id": 111,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 107
          },
          "id": 94,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%line%' and metric LIKE '%loading_percent' AND agent_id = $agent_2\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Line-Sensor-Reading: loading_percent ($agent_2_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 107
          },
          "id": 92,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(CASE WHEN value = 'true' THEN '1'\n          WHEN value = 'false' THEN '0'\n            \n    END AS int)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%line%' and metric LIKE '%in_service' AND agent_id = $agent_2\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Line-Sensor-Reading: in_service ($agent_2_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_2_name: Line-Sensor-Readings",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 85
      },
      "id": 71,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 108
          },
          "id": 75,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%load%' and metric LIKE '%p_mw' AND agent_id = $agent_2\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Load-Sensor-Reading: p_mw ($agent_2_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 108
          },
          "id": 77,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nvalue::float\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%load%' and metric LIKE '%scaling' AND agent_id = $agent_2\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Load-Sensor-Reading: scaling ($agent_2_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 116
          },
          "id": 74,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%load%' and metric LIKE '%q_mvar' AND agent_id = $agent_2\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Load-Sensor-Reading: q_mvar ($agent_2_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 116
          },
          "id": 76,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(CASE WHEN value = 'true' THEN '1'\n          WHEN value = 'false' THEN '0'\n            \n    END AS int)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%load%' and metric LIKE '%in_service' AND agent_id = $agent_2\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Load-Sensor-Reading: in_service ($agent_2_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_2_name: Load-Sensor-Readings",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 86
      },
      "id": 107,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 109
          },
          "id": 80,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nvalue::float\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%sgen%' and metric LIKE '%p_mw_flex' AND (agent_id = $agent_2)\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Sgen-Sensor-Reading: p_mw_flex ($agent_2_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 109
          },
          "id": 78,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%sgen%' and metric LIKE '%p_mw' AND (agent_id = $agent_2)\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Sgen-Sensor-Reading: p_mw ($agent_2_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 117
          },
          "id": 82,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%sgen%' and metric LIKE '%q_mvar' AND (agent_id = $agent_2)\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Sgen-Sensor-Reading: q_mvar ($agent_2_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 117
          },
          "id": 83,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nvalue::float\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%sgen%' and metric LIKE '%scaling' AND (agent_id = $agent_2)\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Sgen-Sensor-Reading: scaling ($agent_2_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 125
          },
          "id": 86,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(CASE WHEN value = 'true' THEN '1'\n          WHEN value = 'false' THEN '0'\n            \n    END AS int)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%sgen%' and metric LIKE '%in_service' AND (agent_id = $agent_2)\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Sgen-Sensor-Reading: in_service ($agent_2_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_2_name: Sgen-Sensor-Readings",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 87
      },
      "id": 109,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 110
          },
          "id": 98,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%trafo%' and metric LIKE '%loading_percent' AND agent_id = $agent_2\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Trafo-Sensor-Reading: loading_percent ($agent_2_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 110
          },
          "id": 102,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nvalue::float\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%trafo%' and metric LIKE '%tap_pos' AND agent_id = $agent_2\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Trafo-Sensor-Reading: tap_pos ($agent_2_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 118
          },
          "id": 100,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(CASE WHEN value = 'true' THEN '1'\n          WHEN value = 'false' THEN '0'\n            \n    END AS int)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%trafo%' and metric LIKE '%in_service' AND agent_id = $agent_2\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Trafo-Sensor-Reading: in_service ($agent_2_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_2_name: Trafo-Sensor-Readings",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 88
      },
      "id": 115,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 111
          },
          "id": 72,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%ext_grid%' and metric LIKE '%p_mw' AND agent_id = $agent_2 \nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Ext-Grid-Sensor-Reading: p_mw ($agent_2_name)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 111
          },
          "id": 73,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(json_data.value::json->>'value' as float)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njson_each(muscle_actions.sensor_readings::json) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%ext_grid%' and metric LIKE '%q_mvar' AND agent_id = $agent_2 \nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Ext-Grid-Sensor-Reading: q_mvar ($agent_2_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_2_name: Ext-Grid-Sensor-Readings",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 89
      },
      "id": 117,
      "panels": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P47E1BA2B3D02DB01"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 112
          },
          "id": 96,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "postgres",
                "uid": "P47E1BA2B3D02DB01"
              },
              "format": "time_series",
              "group": [],
              "metricColumn": "none",
              "rawQuery": true,
              "rawSql": "SELECT ('${start_date}'::TIMESTAMP + '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) - '01:00:00'::time \nas \"time\",\njson_data.metric as metric,\nCAST(CASE WHEN json_data.value::json->>'value' = 'true' THEN '1'\n          WHEN json_data.value::json->>'value' = 'false' THEN '0'\n            \n    END AS int)\nFROM muscle_actions LEFT JOIN episodes ON muscle_actions.id = episodes.muscle_action_id,\njsonb_each(muscle_actions.sensor_readings::jsonb) as json_data(metric,value)\nWHERE episodes.episode = $episode and metric LIKE '%switch%' AND agent_id = $agent_1\nAND ('${start_date}'::TIMESTAMP+ '1 second'::INTERVAL*CAST(((simtimes::json->>'env')::json->>'simtime_ticks') AS INTEGER)) BETWEEN '${start_date}' \nAND '${end_date}' \nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "p_mw"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "pp_static_generator",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "title": "Switch-Sensor-Reading: closed($agent_1_name)",
          "type": "timeseries"
        }
      ],
      "title": "$agent_2_name: Switch-Sensor-Readings",
      "type": "row"
    }
  ],
  "refresh": false,
  "schemaVersion": 36,
  "style": "dark",
  "tags": [
    ""
  ],
  "templating": {
    "list": [
      {
        "hide": 2,
        "name": "experiment_id",
        "query": 41,
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "name": "start_date",
        "query": "2017-01-01 00:00:00+01:00",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "name": "end_date",
        "query": "2017-01-02 00:00:00+01:00",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "current": {
          "selected": false,
          "text": "73",
          "value": "73"
        },
        "datasource": {
          "type": "postgres",
          "uid": "P47E1BA2B3D02DB01"
        },
        "definition": "SELECT agents.id FROM agents\nLEFT JOIN experiment_run_phases ON agents.experiment_run_phase_id = experiment_run_phases.id\nLEFT JOIN experiment_run_instances ON experiment_run_phases.experiment_run_instance_id = experiment_run_instances.id\nLEFT JOIN experiment_runs ON experiment_run_instances.experiment_run_id = experiment_runs.id\nLEFT JOIN experiments ON experiment_runs.experiment_id = experiments.id\nWHERE CAST(experiment_runs.uid AS INTEGER) = $experiment_id",
        "hide": 2,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "agent_id",
        "options": [],
        "query": "SELECT agents.id FROM agents\nLEFT JOIN experiment_run_phases ON agents.experiment_run_phase_id = experiment_run_phases.id\nLEFT JOIN experiment_run_instances ON experiment_run_phases.experiment_run_instance_id = experiment_run_instances.id\nLEFT JOIN experiment_runs ON experiment_run_instances.experiment_run_id = experiment_runs.id\nLEFT JOIN experiments ON experiment_runs.experiment_id = experiments.id\nWHERE CAST(experiment_runs.uid AS INTEGER) = $experiment_id",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "1",
          "value": "1"
        },
        "datasource": {
          "type": "postgres",
          "uid": "P47E1BA2B3D02DB01"
        },
        "definition": "SELECT DISTINCT episode FROM episodes WHERE episodes.muscle_action_id IN (SELECT id FROM muscle_actions WHERE muscle_actions.agent_id IN (SELECT agents.id FROM agents\nLEFT JOIN experiment_run_phases ON agents.experiment_run_phase_id = experiment_run_phases.id\nLEFT JOIN experiment_run_instances ON experiment_run_phases.experiment_run_instance_id = experiment_run_instances.id\nLEFT JOIN experiment_runs ON experiment_run_instances.experiment_run_id = experiment_runs.id\nLEFT JOIN experiments ON experiment_runs.experiment_id = experiments.id\nWHERE CAST(experiment_runs.uid AS INTEGER) = $experiment_id))",
        "hide": 0,
        "includeAll": false,
        "label": "Episode",
        "multi": false,
        "name": "episode",
        "options": [],
        "query": "SELECT DISTINCT episode FROM episodes WHERE episodes.muscle_action_id IN (SELECT id FROM muscle_actions WHERE muscle_actions.agent_id IN (SELECT agents.id FROM agents\nLEFT JOIN experiment_run_phases ON agents.experiment_run_phase_id = experiment_run_phases.id\nLEFT JOIN experiment_run_instances ON experiment_run_phases.experiment_run_instance_id = experiment_run_instances.id\nLEFT JOIN experiment_runs ON experiment_run_instances.experiment_run_id = experiment_runs.id\nLEFT JOIN experiments ON experiment_runs.experiment_id = experiments.id\nWHERE CAST(experiment_runs.uid AS INTEGER) = $experiment_id))",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 3,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "73",
          "value": "73"
        },
        "datasource": {
          "type": "postgres",
          "uid": "P47E1BA2B3D02DB01"
        },
        "definition": "SELECT agents.id FROM agents\nLEFT JOIN experiment_run_phases ON agents.experiment_run_phase_id = experiment_run_phases.id\nLEFT JOIN experiment_run_instances ON experiment_run_phases.experiment_run_instance_id = experiment_run_instances.id\nLEFT JOIN experiment_runs ON experiment_run_instances.experiment_run_id = experiment_runs.id\nLEFT JOIN experiments ON experiment_runs.experiment_id = experiments.id\nWHERE CAST(experiment_runs.uid AS INTEGER) = $experiment_id\nLIMIT 1 OFFSET 0",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "agent_1",
        "options": [],
        "query": "SELECT agents.id FROM agents\nLEFT JOIN experiment_run_phases ON agents.experiment_run_phase_id = experiment_run_phases.id\nLEFT JOIN experiment_run_instances ON experiment_run_phases.experiment_run_instance_id = experiment_run_instances.id\nLEFT JOIN experiment_runs ON experiment_run_instances.experiment_run_id = experiment_runs.id\nLEFT JOIN experiments ON experiment_runs.experiment_id = experiments.id\nWHERE CAST(experiment_runs.uid AS INTEGER) = $experiment_id\nLIMIT 1 OFFSET 0",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "74",
          "value": "74"
        },
        "datasource": {
          "type": "postgres",
          "uid": "P47E1BA2B3D02DB01"
        },
        "definition": "SELECT agents.id FROM agents\nLEFT JOIN experiment_run_phases ON agents.experiment_run_phase_id = experiment_run_phases.id\nLEFT JOIN experiment_run_instances ON experiment_run_phases.experiment_run_instance_id = experiment_run_instances.id\nLEFT JOIN experiment_runs ON experiment_run_instances.experiment_run_id = experiment_runs.id\nLEFT JOIN experiments ON experiment_runs.experiment_id = experiments.id\nWHERE CAST(experiment_runs.uid AS INTEGER) = $experiment_id\nLIMIT 1 OFFSET 1\n",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "agent_2",
        "options": [],
        "query": "SELECT agents.id FROM agents\nLEFT JOIN experiment_run_phases ON agents.experiment_run_phase_id = experiment_run_phases.id\nLEFT JOIN experiment_run_instances ON experiment_run_phases.experiment_run_instance_id = experiment_run_instances.id\nLEFT JOIN experiment_runs ON experiment_run_instances.experiment_run_id = experiment_runs.id\nLEFT JOIN experiments ON experiment_runs.experiment_id = experiments.id\nWHERE CAST(experiment_runs.uid AS INTEGER) = $experiment_id\nLIMIT 1 OFFSET 1\n",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "mighty_defender",
          "value": "mighty_defender"
        },
        "datasource": {
          "type": "postgres",
          "uid": "P47E1BA2B3D02DB01"
        },
        "definition": "SELECT name FROM agents\nWHERE id = $agent_1",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "agent_1_name",
        "options": [],
        "query": "SELECT name FROM agents\nWHERE id = $agent_1",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "evil_attacker",
          "value": "evil_attacker"
        },
        "datasource": {
          "type": "postgres",
          "uid": "P47E1BA2B3D02DB01"
        },
        "definition": "SELECT name FROM agents\nWHERE id = $agent_2",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "agent_2_name",
        "options": [],
        "query": "SELECT name FROM agents\nWHERE id = $agent_2",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "hide": 2,
        "name": "midas_startdate",
        "query": "2017-01-01 00:00:00",
        "skipUrlSync": false,
        "type": "constant"
      }
    ]
  },
  "time": {
    "from": "2016-12-31T23:00:00.000Z",
    "to": "2017-01-01T22:59:59.000Z"
  },
  "timepicker": {},
  "timezone": "",
  "title": "custom_newReward",
  "uid": "Dashboard_1",
  "version": 4,
  "weekStart": ""
}